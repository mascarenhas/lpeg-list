Support for matching lists with LPEG
(http://www.inf.puc-rio.br/~roberto/lpeg), like OMeta does.

Is working, but I consider it in alpha, I still have to think on how I
want list matching to work exactly, and how its syntax should be for
RE patterns.

It's backward compatible with LPEG 0.9, but this may change...

Examples:

--------------------------
re = require "re"

p = re.compile[[ {{ "one", {"two"}, "three" }} ]]

assert(p:match{ "one" , "two" ,"three" })

p = re.compile[[
    {{ "one", { "two", ({{ ("foo""bar"*), "bar" }} / {{ "baz", "boo" }})* },
     "three" }}
]]

assert(p:match{ "one", "two", "three" }[1] == "two")
assert(#(p:match{ "one", "two", "three" }) == 1)
assert(#(p:match{ "one", "two", { "foo", "bar" }, { "baz", "boo" }, "three" }) == 3)
assert(p:match{ "one", "two", { "foobarbarbar", "bar" }, { "baz", "boo" },
		"three" }[2][1] == "foobarbarbar")
assert(#(p:match{ "one", "two", { "foobarbar", "bar" }, { "baz", "boo" },
		  "three" }) == 3)


p = re.compile([[ {{ "add", ({.}), ({.}) }} -> add ]], { add = function (x, y) 
								 return x+y
							       end })

assert(p:match{ "add", 2, 3 } == 5)
assert(p:match{ "add", 72, 3 } == 75)
assert(p:match{ "add", 72.5, 3 } == 75.5)
assert(not p:match{ "sub", 72, 3 })
assert(not p:match{ "add", 3 })

p = re.compile[[ {{ "foo", { "bar", (!"baz" .+)*, "baz" }, "boo" }} ]]

assert(p:match{ "foo", "bar", "one", "two", "three", "baz", "boo" }[4] == "three")
assert(#(p:match{ "foo", "bar", "one", "two", "three", "baz", "boo" }) == 5)
assert(p:match{ "foo", "bar", "one", "two", "three", "baz", "boo" }[5] == "baz")
assert(p:match{ "foo", "bar", "baz", "boo" }[2] == "baz")
assert(#(p:match{ "foo", "bar", "baz", "boo" }) == 2)

p = re.compile[[ {{ "foo", "bar", { (!"baz" .+)* }, "baz" , "boo" }} ]]

assert(#(p:match{ "foo", "bar", "one", "two", "three", "baz", "boo" }) == 3)
assert(p:match{ "foo", "bar", "one", "two", "three", "baz", "boo" }[3] == "three")
assert(#(p:match{ "foo", "bar", "baz", "boo" }) == 0)
---------------------------

Use LuaRocks (http://luarocks.org) and the provided .rockspec file to
compile and install. No docs yet, check the test suite list.lua for
more examples.
